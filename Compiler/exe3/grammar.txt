program  @ basic id ( ) block
block    @ { decls stmts }
decls    @ decls decl # ~
decl     @ type id ;
type     @ type [ num ] # basic
basic    @ float # int
stmts    @ stmts M stmt # ~
stmt     @ id = expr ;
           # loc = expr ;
           # if ( bool ) M stmt
           # if ( bool ) M stmt N else M stmt
           # while M ( bool ) M stmt
           # do M stmt while M ( bool ) ;
           # break ;
           # continue ;
           # block
loc @ loc [ num ] # id [ num ]
bool     @ bool || M join # join
join     @ join && M equality # equality
equality @ expr rel expr # true # false
rel      @ < # > # == # != # <= # >=
expr     @ expr1 opa term # term
term     @ temr1 opb unary # unary
unary    @ opc unary # factor
factor   @ ( expr ) # loc # id # num # real
opa      @ + # -
opb      @ * # /
opc      @ ! # -
M        @ ~
N        @ ~